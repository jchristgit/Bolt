---
- name: install apt dependencies
  apt:
    name: "{{ bolt_apt_dependencies }}"
    state: present
  tags:
    - role::bolt

- name: create the `{{ bolt_postgres_user }}` postgres user
  become: true
  become_user: postgres
  postgresql_user:
    name: bolt
    password: "{{ bolt_postgres_password }}"
    state: present
  tags:
    - role::bolt
    - postgres

- name: create the `{{ bolt_postgres_database }}` postgres database
  become: true
  become_user: postgres
  postgresql_db:
    name: bolt
    owner: "{{ bolt_postgres_user }}"
    state: present
  tags:
    - role::bolt
    - postgres

- name: ensure the bolt user is up-to-date
  user:
    name: "{{ bolt_service_user }}"
    home: "{{ bolt_directory }}"
    system: true
    state: present
  tags:
    - role::bolt

- name: make the bolt directory only readable for bolt
  file:
    path: "{{ bolt_directory }}"
    mode: 0700
  tags:
    - role::bolt

- name: set up the deployment directory
  become: true
  become_user: "{{ bolt_service_user }}"
  file:
    path: "{{ bolt_directory }}"
    state: directory
  tags:
    - role::bolt

- name: checkout the source
  become: true
  become_user: "{{ bolt_service_user }}"
  git:
    dest: "{{ bolt_directory }}"
    repo: "{{ bolt_repository_url }}"
    version: "{{ bolt_version }}"
    umask: '0077'
  tags:
    - role::bolt
  notify:
    - restart bolt

- name: download dependencies
  become: true
  become_user: "{{ bolt_service_user }}"
  shell: umask 077 && exec /usr/bin/mix do local.hex --force, local.rebar --force, deps.get --only prod
  args:
    chdir: "{{ bolt_directory }}"
  tags:
    - role::bolt
  register: bolt_command_mix_deps_get
  changed_when: "'All dependencies are up to date' not in bolt_command_mix_deps_get.stdout"
  environment:
    MIX_ENV: prod

- name: build a release
  become: true
  become_user: "{{ bolt_service_user }}"
  shell: umask 077 && exec /usr/bin/nice /usr/bin/mix release
  args:
    chdir: "{{ bolt_directory }}"
  tags:
    - role::bolt
  register: bolt_command_mix_release
  changed_when: "'Release created' in bolt_command_mix_release.stdout"
  environment:
    MIX_ENV: prod

- name: run migrations
  become: true
  become_user: "{{ bolt_service_user }}"
  command: /usr/bin/mix ecto.migrate --all
  args:
    chdir: "{{ bolt_directory }}"
  tags:
    - role::bolt
  register: bolt_command_ecto_migrate
  environment:
    MIX_ENV: prod
    PGSQL_URL: "{{ bolt_pgsql_url }}"
  changed_when: "'Migrated' in bolt_command_ecto_migrate.stdout"

- name: create the configuration directory
  file:
    path: /etc/opt/bolt
    owner: root #"{{ bolt_service_user }}"
    group: root
    state: directory
    mode: '0500'
  tags:
    - role::bolt
    - configuration

- name: template the environment file
  become: yes
  template:
    src: bolt.env.j2
    dest: /etc/opt/bolt/bolt.env
    owner: root
    group: root
    mode: '0400'
  tags:
    - role::bolt
    - configuration
  notify:
    - restart bolt

- name: template the systemd service
  become: yes
  template:
    src: bolt.service.j2
    dest: /etc/systemd/system/bolt.service
    owner: root
    group: root
    mode: '0444'
  register: bolt_service_file
  tags:
    - role::bolt
  notify:
    - restart bolt

- name: start and enable bolt
  systemd:
    daemon_reload: "{{ bolt_service_file is changed }}"
    name: bolt.service
    state: started
    enabled: true
  tags:
    - role::bolt

# - name: upgrade the release
#   block:
#     - name: obtain the known releases
#       command: _build/dev/rel/bolt/bin/bolt releases
#       args:
#         chdir: "{{ bolt_directory }}"
#       tags:
#         - role::bolt
#       register: bolt_command_releases
#       environment:
#         RELEASE_COOKIE: "{{ bolt_cookie }}"

# vim: sw=2 ts=2:
